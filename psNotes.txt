TERMINOLOGY
	VERSION CONTROL SYSTEM (VCS) / SOURCE CODE MANAGER (SCM):
		A VCS is a tool that manages different versions of source code. A SCM is another name for version control system.
		Git is a VSC.

	COMMIT:
		A snapshot of the saved state of the project in Git.
		Every time you commit, Git basically takes a picture of what all the files look like at that moment and stores its reference.

	REPOSITORY / REPO:
		A directory which contains the project work, as well as few files used to communicate with Git.
		It is made up of commits.

	WOKRING DIRECTORY:
		The files present in the the computer's file system.
		This is different from the command line's concept of the current working directory.

	CHECKOUT:
		When content in the repository has been copied to the Working Directory.

	STAGING AREA / STAGING INDEX / INDEX:
		A file in the Git directory that stores information about what will go into the next commit.
		Files in the staging area are assured to be committed or added to the Git repository.

	SECURE HASH ALGORITHM (SHA):
		A unique, 40-characters string, ID number for each commit.

	BRANCH:
		When a new line of development is created that diverges from and without altering the main line of development.

git init COMMAND:
	Command used for creating a new repository in the current directory.
	init stands for 'initialize'.
	This command sets up all the necessary files and directories that Git will use to keep track of everything, which are stored in .git hidden directory.

	.git Directory Contents:
		- config file (where all project specific configuration settings are stored)
		- description file (used for GitWeb program)
		- hooks directory (where to place client-side or server-side scripts used to hook into Git's different lifecycle events)
		- info directory (contains global excludes file)
		- objects directory (stores all of the commits made)
		- refs directory (holds pointers to commits, basically branches and tags)

git clone COMMAND:
	Command used to create an identical copy of an existing repository.
	syntax: git clone <path-to-repository-to-clone>
	This command:
		- takes the path to an existing repository
		- by default will create a directory with the same name as the repository that's being called
		- can be given a second argument that will be used as the name of the directory (git clone <path-to-repository-to-clone> new-directory-name)
		- will create a new repository inside the current working directory

git status COMMAND:
	Command used to display the current status of the repository.
	It will:
		- display new files that have been created in the working directory that Git hasn't started tracking yet
		- display files that Git is tracking that have been modified
		- display other useful information depending on the state of the files, the working directory, and the repository

git log COMMAND:
	Command used to display all the commits of a repository.
	By default, it displays the SHA, the author, the date, and the message of every commit in the repository. It can display a lot more information.
	git log FLAGS:
		- git log --oneline (used to alter how git log displays information). This command lists one commit per line, shows the first 7 characters of the commit's SHA, shows the commit's message
		- git log --stat (used to display the files that have been changed in the commit, as well as the number of lines that have been added or deleted). It also displays a summary line with the total number of modified files and lines that have been added / removed
		- git log -p / --patch (used to display the files that have been modified, the location of the lines that have been added / removed, the actual changes that have been made)
	Supply these commands with a commit's SHA to display information that start at that commit. (git log -p 8fd5759; git log --stat f226b38; git log --oneline 6617a39)

git show COMMAND:
	Command used to view information about a specific commit.
	git show alone will display information about the most recent commit. Provide it with a commit's SHA to view information about that commit.
	This command displays the commit, the author, the date, the commit message, and the patch information
	git show FLAGS:
		- git show --stat (shows how many files were changed and the number of line that were added / removed)
		- git show -p / --patch (default display)
		- git show -w (displays changes made and ignores changes to whitespace)

git add COMMAND:
	Command used to move files from the working directory to the staging area.
	Syntax: git add <file1> <file2> ... <fileN>
	This command takes a space-separated list of file names and adds them to the staging index.
	Running git add . will stage the current directory and all nested files
git commit COMMAND:
	Command used to takes files from the staging index and saves them in the repository.
	Running this command will open the code editor specified in your configuration. Inside the code editor, a commit message must be supplied, lines that start with a '#' are comments and will not be recorded, save the file after adding a commit message, close the editor to make the commit.
	Keep commit messages short, consistent, and explain what the commit does.
	git commit FLAGS:
		- git commit -m "<commit_message>" (create a commit with inline commit message)
		- git commit -a (add and commit all changed files, same as (git add .; git commit))
		- git commit --amend (used to alter the most recent commit, provide a new commit message, add forgotten file(s) to commit. The code editor will open up and display the original commit message.)
		To add forgotten file(s) to the recent commit: edit the file(s), save the file(s), stage the file(s), run git commit --amend to update the most recenct commit
	git revert COMMAND:
		Command used to reverse a previously made commit.
		Syntax: git revert <SHA_of_commit_to_revert>
		This command will undo the changes that were made by the provided commit, then create a new commit to record the change.

Relative Commit References:
	Reference a commit relative to another commit.
	Ancestry References (special characters used to tell Git about these relative references):
		- '^' (indicates the parent commit)
		- '~' (indicates the first parent commit)
	How to refer to previous commits:
		To indicate the parent commit of the current commit (HEAD^, HEAD~, HEAD~1)
		To indicate the grandparent commit of the current commit (HEAD^^, HEAD~2)
		To indicate the great-grandparent commit of the current commit (HEAD^^^, HEAD~3)
	With a merge commit, the '^' reference is used to indicate the first parent (branch HEAD was pointing at when the merge was made) of the commit, while '^2' indicate the second parent (branch that was merged in).

	git reset COMMAND:
		Command used to erase (reset) commits.
		Syntax: git reset <reference_to_commit>
		It can be used to: move the HEAD and current branch pointer to the referenced commit; erase commits; move commited changes to the staging index; unstage commited changes
		git reset FLAGS:
			- git reset --mixed (unstage changes made after referenced commit, will take the changes and move them to the working directory) git reset by default
			- git reset --soft (stage changes made after referenced commit, will take the changes and move them to the staging index)
			- git reset --hard (erase changes made after referenced commit)
		Always be careful while using this command.
