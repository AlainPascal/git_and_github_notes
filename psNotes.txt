TERMINOLOGY
	VERSION CONTROL SYSTEM (VCS) / SOURCE CODE MANAGER (SCM):
		A VCS is a tool that manages different versions of source code. A SCM is another name for version control system.
		Git is a VSC.

	COMMIT:
		A snapshot of the saved state of the project in Git.
		Every time you commit, Git basically takes a picture of what all the files look like at that moment and stores its reference.

	REPOSITORY / REPO:
		A directory which contains the project work, as well as few files used to communicate with Git.
		It is made up of commits.

	WOKRING DIRECTORY:
		The files present in the the computer's file system.
		This is different from the command line's concept of the current working directory.

	CHECKOUT:
		When content in the repository has been copied to the Working Directory.

	STAGING AREA / STAGING INDEX / INDEX:
		A file in the Git directory that stores information about what will go into the next commit.
		Files in the staging area are assured to be committed or added to the Git repository.

	SECURE HASH ALGORITHM (SHA):
		A unique, 40-characters string, ID number for each commit.

	BRANCH:
		When a new line of development is created that diverges from and without altering the main line of development.

git init COMMAND:
	Command used for creating a new repository in the current directory.
	init stands for 'initialize'.
	This command sets up all the necessary files and directories that Git will use to keep track of everything, which are stored in .git hidden directory.

	.git Directory Contents:
		- config file (where all project specific configuration settings are stored)
		- description file (used for GitWeb program)
		- hooks directory (where to place client-side or server-side scripts used to hook into Git's different lifecycle events)
		- info directory (contains global excludes file)
		- objects directory (stores all of the commits made)
		- refs directory (holds pointers to commits, basically branches and tags)

git clone COMMAND:
	Command used to create an identical copy of an existing repository.
	syntax: git clone <path-to-repository-to-clone>
	This command:
		- takes the path to an existing repository
		- by default will create a directory with the same name as the repository that's being called
		- can be given a second argument that will be used as the name of the directory (git clone <path-to-repository-to-clone> new-directory-name)
		- will create a new repository inside the current working directory

git status COMMAND:
	Command used to display the current status of the repository.
	It will:
		- display new files that have been created in the working directory that Git hasn't started tracking yet
		- display files that Git is tracking that have been modified
		- display other useful information depending on the state of the files, the working directory, and the repository

git log COMMAND:
	Command used to display all the commits of a repository.
	By default, it displays the SHA, the author, the date, and the message of every commit in the repository. It can display a lot more information.
	git log FLAGS:
		- git log --oneline (used to alter how git log displays information). This command lists one commit per line, shows the first 7 characters of the commit's SHA, shows the commit's message
		- git log --stat (used to display the files that have been changed in the commit, as well as the number of lines that have been added or deleted). It also displays a summary line with the total number of modified files and lines that have been added / removed
		- git log -p / --patch (used to display the files that have been modified, the location of the lines that have been added / removed, the actual changes that have been made)
		- git log --decorate (displays more information on the log output such as tags, branhes as well as which branch HEAD is pointing to)
	Supply these commands with a commit's SHA to display information that start at that commit. (git log -p 8fd5759; git log --stat f226b38; git log --oneline 6617a39)

git show COMMAND:
	Command used to view information about a specific commit.
	git show alone will display information about the most recent commit. Provide it with a commit's SHA to view information about that commit.
	This command displays the commit, the author, the date, the commit message, and the patch information
	git show FLAGS:
		- git show --stat (shows how many files were changed and the number of line that were added / removed)
		- git show -p / --patch (default display)
		- git show -w (displays changes made and ignores changes to whitespace)
	Running git show <tag_name> will display annotated tag's information along with the commit that was created (running this on a lightweight tag will only display the commit's information)

git add COMMAND:
	Command used to move files from the working directory to the staging area.
	Syntax: git add <file1> <file2> ... <fileN>
	This command takes a space-separated list of file names and adds them to the staging index.
	Running git add . will stage the current directory and all nested files

git commit COMMAND:
	Command used to takes files from the staging index and saves them in the repository.
	Running this command will open the code editor specified in your configuration. Inside the code editor, a commit message must be supplied, lines that start with a '#' are comments and will not be recorded, save the file after adding a commit message, close the editor to make the commit.
	Keep commit messages short, consistent, and explain what the commit does.

git diff COMMAND:
	Command used to see changes that have been made but haven't been committed yet.
	Running this command will display the files that have been modified, the location of the lines that have been added / removed, the actual changes that have been made.

.gitignore FILE:
	File used to tell Git about the files that Git should not track. This file should be placed in the same directory that the .git directory is in.
	Git will not track files listed in .gitignore
	Check out the concept of globbing on how to list multiple files in .gitignore at once

git tag COMMAND:
	Command used to add a marker on a specific commit. The tag does not move around as new commits are added.
	Syntax: git tag -a <tag_name> (create an annotated tag wiith the -a flag)
			git tag <tag_name> (create a lightweight tag)
	Annotated tags are recommended because they include a lot of extra information (the person who made the tag, the date the tag was made, a message for the tag)
	Running git tag will display all tags that are in the repository.
	git tag FLAGS:
		- git tag -a <tag_name> (creates an annotated tag)
		- git tag -a <tag_name> -m <tag_message>(creates annotated tag and specifies a tagging message)
		- git tag -d <tag_name> (deletes a tag from local repository)
		- git tag -l / --list (lists the existing tags)
	Specify the SHA to add a tag to a specific commit

git branch COMMAND:
	Command used to intereact with Git's branches.
	Running git branch will list out the branches in the repository and show the active branch.
	A branch is used to do development or make a fix to the project that won't affect the project (since the changes are made on a branch)
	Once the changes are made on the branch, it can be combined into the master branch (merging)
	Syntax: - git branch <branch_name> (creates a branch)
			- git branch <branch_name> <commit_SHA> (creates a branch and have it point to the specified commit's SHA)
			- git branch -d <branch_name> (deletes a branch once changes have been merged)
			- git branch -D <branch_name> (forces deletion of a branch)
	Git will not delete a branch if HEAD is currently pointing to it.
	Git will not delete a branch if it has commits on it that aren't on any other branch.
	To switch between branches, use git checkout <branch_name> command
	Running git checkout -b <branch_name> will create a branch and switch to it a the same time (git branch <branch_name>; git checkout <branch_name>). Look out for more information on git checkout COMMAND.
